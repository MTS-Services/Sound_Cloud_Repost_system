<?php

namespace Database\Seeders;

use App\Models\CreditTransaction;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Database\Seeder;

class CreditTransactionSeeder extends Seeder
{
    public function run(): void
    {
        // $user = User::first();
        // if (!$user) {
        //     $this->command->info('No users found. Seed a user first.');
        //     return;
        // }
        // $userUrn = $user->urn;

        // // Create a dummy sender user to satisfy the foreign key constraint
        // $sender = User::factory()->create([
        //     'urn' => 'urn:user:dummy_sender_for_seeder',
        //     'name' => 'Dummy Sender',
        //     'email' => 'dummy-sender@example.com',
        // ]);
        // $senderUrn = $sender->urn;

        // // ... rest of your existing run() method ...
        // $daysToSeed = Carbon::now()->dayOfWeek === Carbon::SUNDAY ? 7 : Carbon::now()->dayOfWeek;

        // $lastWeekStartDate = Carbon::now()->subWeek()->startOfWeek();
        // $this->seedWeekToDate($userUrn, $senderUrn, $lastWeekStartDate, $daysToSeed, 100);

        // $thisWeekStartDate = Carbon::now()->startOfWeek();
        // $this->seedWeekToDate($userUrn, $senderUrn, $thisWeekStartDate, $daysToSeed, 150);

        // $this->command->info('Weekly-to-date credit transactions seeded.');
    }

    // private function seedWeekToDate(string $userUrn, string $senderUrn, Carbon $startDate, int $days, int $totalCredits)
    // {
    //     if ($days <= 0) {
    //         return;

    //         $creditsPerDay = intdiv($totalCredits, $days);
    //         $remainder = $totalCredits % $days;

    //         for ($i = 0; $i < $days; $i++) {
    //             $date = $startDate->copy()->addDays($i)->addHours(rand(0, 23))->addMinutes(rand(0, 59))->addSeconds(rand(0, 59));
    //             $creditsAmount = $creditsPerDay + ($i === 0 ? $remainder : 0);

    //             CreditTransaction::create([
    //                 'sort_order' => $i + 1,
    //                 'receiver_urn' => $userUrn,
    //                 'sender_urn' => $senderUrn, // Use the URN of the created dummy user
    //                 'calculation_type' => CreditTransaction::CALCULATION_TYPE_CREDIT,
    //                 'soundcloud_id' => rand(1, 100),
    //                 'source_id' => rand(1, 50),
    //                 'source_type' => 'App\\Models\\Order',
    //                 'transaction_type' => CreditTransaction::TYPE_EARN,
    //                 'status' => CreditTransaction::STATUS_SUCCEEDED,
    //                 'amount' => $creditsAmount * 0.1,
    //                 'credits' => $creditsAmount,
    //                 'description' => 'Dummy transaction for ' . $date->format('Y-m-d'),
    //                 'metadata' => json_encode(['seeder_note' => 'Generated by CreditTransactionSeeder']),
    //                 'creater_id' => 1,
    //                 'updater_id' => 1,
    //                 'creater_type' => 'App\\Models\\User',
    //                 'updater_type' => 'App\\Models\\User',
    //                 'created_at' => $date,
    //                 'updated_at' => $date,
    //             ]);
    //         }
    //     }

    // }

}
